li $t0, 0x1fff0000
li $t1, 0xdeadbeef
sw $t1, 0($t0)


top:
li $k0, 0x80000000
lw $k0, 0($k0)
andi $k0, $k0, 0x1
beqz $k0, top
li $k0, 0x80000008
li $k1, 0x63
sw $k1, 0($k0) 

r100M:
li $t4, 0x1f0000b0
lw $t5, 0($t4) #initial seconds
lw $t6, 4($t4) #initial minutes

add $t0, $0, $0
li  $t1, 100000000 #100M
loop:
addi $t0, $t0, 1
bne $t0, $t1, loop	

lw $t7, 0($t4) #end seconds
lw $t8, 4($t4) #end minutes

sub $t2, $t8, $t6 #minute diff
sub $t3, $t7, $t5 #second diff
		
add $t4, $0, $0
add $t5, $t3, $0


dec_loop:
addiu $t5, $t5, -10
bltz $t5, end_dec_loop
addiu $t4, $t4, 1
j dec_loop
end_dec_loop:
addiu $t5, $t5, 10
addiu $t4, $t4, 0x30 #converts to ascii
addiu $t5, $t5, 0x30 #converts to ascii
	
jal send_byte #send the minute

li $t2, 0x3a
jal send_byte

add $t2, $0, $t4
jal send_byte

add $t2, $0, $t5
jal send_byte

li $t2, 0x3d
jal send_byte

li $t2, 0x3a
jal send_byte
	
jr $ra

#									t2:t4 t5
#now need to write output in form r: m:ss

send_byte: #send the byte stored at $t2
li $t0, 0x1f0000d0  #inIdx adr
lw $t1, 0($t0)      #load inIdx to k1
li $t0, 0x1f0000d8  #buffer adr
addu $t0, $t1, $t0  #add inIdx to buffer addr
sb $t2, 0($t0)
li $t0, 0x1f0000d0  #inIdx adr
lw $t1, 0($t0)      #load inIdx to k1
addiu $t1, $t1, 1 #incremenent inIdx
sw $t1, 0($t0)   #store back
li $t0, 0x14 #20
bne $t0, $t1, xyz 
li $t0, 0x1f0000d0
sw $0, 0($t0)
xyz:
jr $ra
